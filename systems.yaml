---
  - name : Base config for all linux host
    hosts: all
    become: True
    tasks:
      - name : Create admin user with uid 5001
        user :
          name : admin
          state : present
          uid : 5001
      - name : Remove user dojo
        user:
          name : dojo
          state : absent
      - name : Install Tree
        yum :
          name : tree
          state : present
      - name : Install ntp
        yum :
          name : ntp
          state : present
      - name : start ntp service
        service : name=ntpd state=started enabled=yes 

import boto3
from datetime import datetime, timedelta, timezone
from prettytable import PrettyTable
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# AWS Clients
fsx_client = boto3.client('fsx')
cloudwatch_client = boto3.client('cloudwatch')

# Thresholds
UTILIZATION_THRESHOLD = 70  # Percentage
AGE_THRESHOLD_DAYS = 7

# Email Configuration
SENDER_EMAIL = 'your_email@example.com'
RECIPIENT_EMAIL = 'recipient@example.com'
SMTP_SERVER = 'smtp.example.com'
SMTP_PORT = 587
SMTP_USERNAME = 'your_smtp_username'
SMTP_PASSWORD = 'your_smtp_password'

def get_fsx_filesystems():
    """
    Get all FSx ONTAP file systems.
    """
    filesystems = []
    paginator = fsx_client.get_paginator('describe_file_systems')
    for page in paginator.paginate():
        filesystems.extend(page['FileSystems'])
    return filesystems

def get_file_system_utilization(fs_id):
    """
    Get the storage utilization of an FSx file system from CloudWatch.
    """
    response = cloudwatch_client.get_metric_statistics(
        Namespace='AWS/FSx',
        MetricName='StorageCapacityUtilization',
        Dimensions=[{'Name': 'FileSystemId', 'Value': fs_id}],
        StartTime=datetime.utcnow() - timedelta(days=1),
        EndTime=datetime.utcnow(),
        Period=86400,
        Statistics=['Average']
    )
    if response['Datapoints']:
        return response['Datapoints'][0]['Average']
    return None

def get_volumes(fs_id):
    """
    Get volumes associated with a given FSx ONTAP file system.
    """
    volumes = []
    paginator = fsx_client.get_paginator('describe_volumes')
    for page in paginator.paginate(Filters=[{'Name': 'file-system-id', 'Values': [fs_id]}]):
        volumes.extend(page['Volumes'])
    return volumes

def generate_report():
    """
    Generate a report of FSx ONTAP file systems with >70% utilization and older than 7 days.
    """
    filesystems = get_fsx_filesystems()
    report = []

    for fs in filesystems:
        if fs['FileSystemType'] == 'ONTAP':
            fs_id = fs['FileSystemId']
            creation_time = fs['CreationTime']
            age = (datetime.now(timezone.utc) - creation_time).days

            if age > AGE_THRESHOLD_DAYS:
                utilization = get_file_system_utilization(fs_id)
                if utilization and utilization > UTILIZATION_THRESHOLD:
                    volumes = get_volumes(fs_id)
                    volume_report = []
                    for vol in volumes:
                        volume_report.append({
                            'VolumeId': vol['VolumeId'],
                            'Name': vol['Name'],
                            'Size': vol['CapacityAllocation']['StorageCapacity'],
                            'Used': vol['CapacityAllocation'].get('UsedStorageCapacity', 'N/A')
                        })
                    
                    report.append({
                        'FileSystemId': fs_id,
                        'CreationTime': creation_time.strftime("%Y-%m-%d %H:%M:%S"),
                        'Utilization': f"{utilization:.2f}%",
                        'Volumes': volume_report
                    })

    return report

def create_html_table(report):
    """
    Create separate HTML tables for each file system.
    """
    html_content = "<h2>FSx ONTAP Utilization Report</h2>"

    for fs in report:
        # FileSystem Header
        html_content += f"<h3>FileSystem ID: {fs['FileSystemId']}</h3>"
        html_content += f"<p><strong>Creation Time:</strong> {fs['CreationTime']}<br>"
        html_content += f"<strong>Utilization:</strong> {fs['Utilization']}</p>"

        # Table for Volumes
        table = PrettyTable()
        table.field_names = ["Volume ID", "Volume Name", "Size (GB)", "Used (GB)"]

        for vol in fs['Volumes']:
            table.add_row([vol['VolumeId'], vol['Name'], vol['Size'], vol['Used']])

        html_content += table.get_html_string()
        html_content += "<br>"

    return html_content

def send_email(html_content):
    """
    Send the report as an HTML email.
    """
    msg = MIMEMultipart('alternative')
    msg['Subject'] = "FSx ONTAP Utilization Report"
    msg['From'] = SENDER_EMAIL
    msg['To'] = RECIPIENT_EMAIL

    part = MIMEText(html_content, 'html')
    msg.attach(part)

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.sendmail(SENDER_EMAIL, RECIPIENT_EMAIL, msg.as_string())

def main():
    report = generate_report()
    if report:
        html_table = create_html_table(report)
        send_email(html_table)
        print("Report sent successfully.")
    else:
        print("No file systems exceeding utilization threshold.")

if __name__ == "__main__":
    main()
